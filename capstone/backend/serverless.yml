service:
  name: serverless-blog-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    PROJECT_NAME: uda-proj-5
    USER_ID_INDEX: UserIdIndex
    BLOGS_TABLE: uda-proj-5-blog-${self:provider.stage}
    ATTACHMENT_S3_BUCKET: uda-proj-5-attachment-${self:provider.stage}
  custom:
    documentation:
      api:
        info:
          version: '1.0.0'
          title: udacity-project5-blog-api
          description: udacity-project5-blog-api
      models:
        - name: CreateBlogRequest
          contentType: "application/json"
          schema:
            required:
              - name
              - dueDate
            properties:
              name:
                type: string
              dueDate:
                type: string
        - name: UpdateBlogRequest
          contentType: "application/json"
          schema:
            required:
              - name
              - dueDate
              - done
            properties:
              name:
                type: string
              dueDate:
                type: string
              done:
                type: boolean

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetBlogs:
    handler: src/lambda/http/getBlogs.handler
    events:
      - http:
          method: get
          path: blogs
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-get-blog-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}/index/UserIdIndex
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"
          
  CreateBlog:
    handler: src/lambda/http/createBlog.handler
    events:
      - http:
          method: post
          path: blogs
          cors: true
          authorizer: Auth
          documentation:
            summary: "Create a new blog item"
            description: "Create a new blog item"
            requestModels:
              "application/json": CreateBlogRequest
          reqValidatorName: onlyBody
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-create-blog-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"

  UpdateBlog:
    handler: src/lambda/http/updateBlog.handler
    events:
      - http:
          method: patch
          path: blogs/{blogId}
          cors: true
          authorizer: Auth
          documentation:
            summary: "Update a blog item"
            description: "Update a blog item"
            requestModels:
              "application/json": UpdateBlogRequest
          reqValidatorName: onlyBody
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-update-blog-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"

  DeleteBlog:
    handler: src/lambda/http/deleteBlog.handler
    events:
      - http:
          method: delete
          path: blogs/{blogId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-delete-blog-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BLOGS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: blogs/{blogId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-s3-upload-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: "Allow"
        Action:
          - xray:PutTelemetryRecords
          - xray:PutTraceSegments
        Resource: "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,PATCH'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'true'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    BlogsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: blogId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: blogId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: UserIdIndex
            KeySchema:
            - AttributeName: userId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.BLOGS_TABLE}
    
    onlyBody:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
    bucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket